***Password Manager***

Implemented as part of the days 20 and 30 of the course 100 days of Python.
Goals of the project were to get more practice with:
 - Tkinter, to create GUI Programs
 - handling errors and exceptions
 - working with JSON

All implementation was taken care of prior to watch the solution videos.

Key difference:
 - course solution does not account for duplicated data for the same website.
 - course solution does not clear password input before showing the generated password. So if user had typed something there, it will add the generated string before the typed one. Also, if user clicks the button multiple times, a new string will be simply added before the previous one. The generated password copied to clipboard won't match the password in the input, since it will only be comprised of the last generated string.

Planned for next iterations: add layers of security
 - create an authentication for the app itself
 - don't save plain passwords in the data.json file

-------------------------------

USER GUIDE 

This app implements a Password Manager.

-> How this app works

1. When app launches, user sees a window with the following inputs
 - website: the name of the website that the user wants to save a password for, or want to serach for a existing password
 - username/email: username that the user registered within the website to authenticate
 - password: password that the user registered within the website to authenticate

2. In order to save authentication data for a new website, user must enter data in all the fields and click ADD.
 - If any of the entries has no data entered when the ADD button is clicked, the program will show an error message.
 - If all entries were properly filled, a confirmation message will be displayed, so the user can check that data once more, and confirm if they want to save.

3. If user already has authentication data saved for that website, they will be prompted to confirm if they want to overwrite the exisitng data. Only one pair of username and passwords will be allowed for each website.
 - NOTE: the website name will always be capitalized before saving the data to the file, so it's not case sensitive

4. In order to search the password for a website, user must enter the name of the website in the respective input and click SEARCH
 - If no data was entered in the input, the program will show an error message.
 - If the website that was entered does not exist in the data file, and message saying the no data could be found for that website is displayed.
 - If there's authentication data saved for that website, that data is displayed in a pop up, and the password is copied to the user's clipboard.

5. A random password comprised of 8-10 random letters, 2-4 random symbols, and 2-4 random numbers can be automatically created by clicking GENERATE PASSWORD. Once the button is clicked, the generated password will be displayed in the password input, and copied to the user's clipboard.

-------------------------------

IMPLEMENTATION NOTES

--> CONSTANTS
This section contains the program constants.

LOGO_IMAGE: relative path of the logo image
LETTERS, NUMBERS, SYMBOLS: lists that contan all letters, numbers and symblos that are used by the password generator


--------
--> SAVE PASSWORD
This sections contains functions related to the functionality that validates and saves the data entered by the user when the ADD button is clicked.

-> submit_entries()
Function that is called when the ADD button is clicked. It gets the values from the form entries and check if they are not empty (validation step). If any entry is empty, displays error message. If no empty entries, calls confirm_save passing the the parsed website, username, password as arguments, to display the save confirmation.

NOTE: the website value that is pulled from the form is always titled cased and any spaces between words are reduced to only one space. This prevents duplicated data being saved for the same website.
 - example: user types either "Password manager" or "password     manager" -> both are converted to "Password Manager".


-> confirm_save(website, username, password)
Function that receives the website, username, password data parsed from the form in the submit_entries() function and displays a messagebox to confirm save containing the data submitted in the form so user can confer. Calls save_password passing the the parsed website, username, password as arguments, to save the data only if user clicks 'yes' in the messagebox. It also calls clear_form_entries, to clear the website, username and password inputs in the main window.


-> save_password(website, username, password)
Function that receives the website, username, password data parsed from the form in the submit_entries() function and saves the data entered in the password manager form to a data.json file.
 - tries to open an existing data file and read data from it
 - if file does not exist creates a file and write the only new data to it
 - if file exists and the program could read from a data.json file 
	- check for pre existing authentication data for that website
	   - if website was found in existing data file, check if user wants to overwrite existing authentication data
	   - if user wants to overwrite -> replace existing authentication data
	- no existing authentication data for the website
	   - update exisiting data in data file with new data entered by the user
	   - open file in write mode -> write the updated data to the data file


-> clear_form_entries()
Function that clears the website, username and password inputs. It's called when the user confirms the save. 


--------
--> PASSWORD GENERATOR
This sections contains functions related to the functionality that generates a random password when the GENERATE PASSWORD button is clicked.

-> generate_password()
Function that generates a new random password, shows it to the password entry in the form, and copies the generated password to the user's clipboard. If the entry had input from user, this input will be cleared before the generated string is inserted in the entry.


--------
--> SEARCH AUTHENTICATION DATA
This sections contains functions related to the functionality that searches for authentication data for a given website when the SEARCH button is clicked.

-> search_data_for_website()
Function that searches username and password data for a website that the user enters in the website entry.
 - since all website name is titled case website and the program makes sure that there are no more than one space between words, the same steps of converting the value in the input to the save format are taken before the search is actually made.
 - it checks for empty website input, and displays error message if that's the case
 - if input is not empty
	- tries to open a existing data file and read from it
	- if file does not exist -> show messagebox with appropriated error message
	- if there is such file, gets a reference to a dictionary containing the existing data saved for the user and tries to find the website in the keys
	- if it finds website in data, show messagebox with the respective username and password
	- if cannot find website in data -> show messagebox with appropriated error message

--------
--> UI SETUP
This section has code that generates all main screen elements and place them on the screen

 - window -> new top level widget, which will hold all the following elements and where the program will run
 - logo_canvas -> canvas widget that will hold the logo_image
 - wesite_label, username_label, password_label -> labels to indicate to user what the respective input expects
 - website_entry -> entry to receive user input for the name of the website that the user wants to save a password for, or want to serach for a existing password
 - username_entry -> entry to receive user input for the username that the user registered within the website to authenticate
 - password_entry -> entry to receive user input for the password that the user registered within the website to authenticate
 - search_button -> a button that will call search_data_for_website method when clicked
 - gen_password_button -> a button that will call generate_password method when clicked
 - add_button -> a button that will call submit_entries method when clicked
 